//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ELiconaTelcelEntities : DbContext
    {
        public ELiconaTelcelEntities()
            : base("name=ELiconaTelcelEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Departamento> Departamentoes { get; set; }
        public virtual DbSet<Empleado> Empleadoes { get; set; }
        public virtual DbSet<Puesto> Puestoes { get; set; }
        public virtual DbSet<Vista_Empleado_Depa_Puesto> Vista_Empleado_Depa_Puesto { get; set; }
    
        public virtual int AddEmpleado(string nombre, Nullable<int> idPuesto, Nullable<int> idDepartamento)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idPuestoParameter = idPuesto.HasValue ?
                new ObjectParameter("IdPuesto", idPuesto) :
                new ObjectParameter("IdPuesto", typeof(int));
    
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmpleado", nombreParameter, idPuestoParameter, idDepartamentoParameter);
        }
    
        public virtual ObjectResult<CoincidenciaNombre_Result> CoincidenciaNombre(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CoincidenciaNombre_Result>("CoincidenciaNombre", nombreParameter);
        }
    
        public virtual int DeleteEmpleado(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmpleado", idEmpleadoParameter);
        }
    
        public virtual ObjectResult<GetAllDepartamentos_Result> GetAllDepartamentos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDepartamentos_Result>("GetAllDepartamentos");
        }
    
        public virtual ObjectResult<GetAllPuestos_Result> GetAllPuestos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPuestos_Result>("GetAllPuestos");
        }
    
        public virtual ObjectResult<GetAllEmpleados_Result> GetAllEmpleados()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmpleados_Result>("GetAllEmpleados");
        }
    }
}
